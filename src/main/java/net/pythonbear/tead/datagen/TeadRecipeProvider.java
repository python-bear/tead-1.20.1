package net.pythonbear.tead.datagen;

import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.minecraft.block.Blocks;
import net.minecraft.data.server.recipe.RecipeJsonProvider;
import net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder;
import net.minecraft.data.server.recipe.ShapelessRecipeJsonBuilder;
import net.minecraft.item.ItemConvertible;
import net.minecraft.item.Items;
import net.minecraft.recipe.Ingredient;
import net.minecraft.recipe.book.RecipeCategory;
import net.minecraft.registry.tag.ItemTags;
import net.minecraft.util.Identifier;
import net.pythonbear.tead.Tead;
import net.pythonbear.tead.init.TeadBlocks;
import net.pythonbear.tead.init.TeadItems;
import net.pythonbear.tead.init.TeadTags;

import java.util.List;
import java.util.function.Consumer;

public class TeadRecipeProvider extends FabricRecipeProvider {
    private static final List<ItemConvertible> RUBY_SMELTABLES = List.of(
            TeadBlocks.RUBY_ORE,
            TeadBlocks.DEEPSLATE_RUBY_ORE
    );
    private static final List<ItemConvertible> LEAD_SMELTABLES = List.of(
            TeadBlocks.LEAD_ORE,
            TeadItems.GALENA
    );
    private static final List<ItemConvertible> DARK_BRICK_SMELTABLES = List.of(
            TeadBlocks.CLAYISH_MUD,
            TeadItems.MUDDY_CLAY_BALL
    );
    private static final List<ItemConvertible> BLOCK_OF_COPPER_SMELTABLES = List.of(
            Blocks.RAW_COPPER_BLOCK
    );
    private static final List<ItemConvertible> BLOCK_OF_IRON_SMELTABLES = List.of(
            Blocks.RAW_IRON_BLOCK
    );
    private static final List<ItemConvertible> BLOCK_OF_GOLD_SMELTABLES = List.of(
            Blocks.RAW_GOLD_BLOCK
    );
    private static final List<ItemConvertible> BLOCK_OF_LEAD_SMELTABLES = List.of(
            TeadBlocks.RAW_LEAD_BLOCK
    );

    public TeadRecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(Consumer<RecipeJsonProvider> exporter) {
        offerSmelting(exporter, BLOCK_OF_COPPER_SMELTABLES, RecipeCategory.MISC, Items.COPPER_BLOCK, 6.3f,
                1800, "copper_block");
        offerBlasting(exporter, BLOCK_OF_COPPER_SMELTABLES, RecipeCategory.MISC, Items.COPPER_BLOCK, 6.3f,
                900, "copper_block");
        offerSmelting(exporter, BLOCK_OF_IRON_SMELTABLES, RecipeCategory.MISC, Items.IRON_BLOCK, 6.3f,
                1800, "iron_block");
        offerBlasting(exporter, BLOCK_OF_IRON_SMELTABLES, RecipeCategory.MISC, Items.IRON_BLOCK, 6.3f,
                900, "iron_block");
        offerSmelting(exporter, BLOCK_OF_GOLD_SMELTABLES, RecipeCategory.MISC, Items.GOLD_BLOCK, 9f,
                1800, "gold_block");
        offerBlasting(exporter, BLOCK_OF_GOLD_SMELTABLES, RecipeCategory.MISC, Items.GOLD_BLOCK, 9f,
                900, "gold_block");
        offerSmelting(exporter, BLOCK_OF_LEAD_SMELTABLES, RecipeCategory.MISC, TeadBlocks.LEAD_BLOCK, 7.2f,
                1620, "lead_block");
        offerBlasting(exporter, BLOCK_OF_LEAD_SMELTABLES, RecipeCategory.MISC, TeadBlocks.LEAD_BLOCK, 7.2f,
                720, "lead_block");
        offerSmelting(exporter, RUBY_SMELTABLES, RecipeCategory.MISC, TeadItems.RUBY, 2, 300,
                "ruby");
        offerBlasting(exporter, RUBY_SMELTABLES, RecipeCategory.MISC, TeadItems.RUBY, 2, 150,
                "ruby");
        offerSmelting(exporter, LEAD_SMELTABLES, RecipeCategory.MISC, TeadItems.LEAD_INGOT, 0.8f,
                180, "lead_ingot");
        offerBlasting(exporter, LEAD_SMELTABLES, RecipeCategory.MISC, TeadItems.LEAD_INGOT, 0.8f,
                80, "lead_ingot");
        offerSmelting(exporter, DARK_BRICK_SMELTABLES, RecipeCategory.MISC, TeadItems.DARK_BRICK, 0,
                150, "dark_brick");
        offerBlasting(exporter, DARK_BRICK_SMELTABLES, RecipeCategory.MISC, TeadItems.DARK_BRICK, 0,
                80,  "dark_brick");
        offerReversibleCompactingRecipes(exporter, RecipeCategory.BUILDING_BLOCKS, TeadItems.RUBY, RecipeCategory.MISC,
                TeadBlocks.RUBY_BLOCK);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.BUILDING_BLOCKS, TeadItems.GALENA,
                RecipeCategory.MISC, TeadBlocks.RAW_LEAD_BLOCK);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.BUILDING_BLOCKS, TeadItems.OBSIDIAN_SHARD,
                RecipeCategory.MISC, Blocks.OBSIDIAN);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.MISC, TeadItems.LEAD_NUGGET, RecipeCategory.MISC,
                TeadItems.LEAD_INGOT);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.MISC, TeadItems.STEEL_NUGGET, RecipeCategory.MISC,
                TeadItems.STEEL_INGOT);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.MISC, TeadItems.ROSE_GOLD_NUGGET, RecipeCategory.MISC,
                TeadItems.ROSE_GOLD_INGOT);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.MISC, TeadItems.BRONZE_NUGGET, RecipeCategory.MISC,
                TeadItems.BRONZE_INGOT);
        offerReversibleCompactingRecipes(exporter, RecipeCategory.MISC, TeadItems.COPPER_NUGGET, RecipeCategory.MISC,
                Items.COPPER_INGOT);
        offerSlabRecipe(exporter, RecipeCategory.BUILDING_BLOCKS, TeadBlocks.LEAD_CUT_SLAB, TeadBlocks.LEAD_CUT_BLOCK);
        createStairsRecipe(TeadBlocks.LEAD_CUT_STAIRS, Ingredient.ofItems(TeadBlocks.LEAD_CUT_BLOCK))
                .criterion(hasItem(TeadBlocks.LEAD_CUT_BLOCK), conditionsFromItem(TeadBlocks.LEAD_CUT_BLOCK))
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "lead_cut_stairs"));
        offerSlabRecipe(exporter, RecipeCategory.BUILDING_BLOCKS, TeadBlocks.BRASS_CUT_SLAB, TeadBlocks.BRASS_CUT_BLOCK);
        createStairsRecipe(TeadBlocks.BRASS_CUT_STAIRS, Ingredient.ofItems(TeadBlocks.BRASS_CUT_BLOCK))
                .criterion(hasItem(TeadBlocks.BRASS_CUT_BLOCK), conditionsFromItem(TeadBlocks.BRASS_CUT_BLOCK))
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "brass_cut_stairs"));
        offerSlabRecipe(exporter, RecipeCategory.BUILDING_BLOCKS, TeadBlocks.BRONZE_CUT_SLAB, TeadBlocks.BRONZE_CUT_BLOCK);
        createStairsRecipe(TeadBlocks.BRONZE_CUT_STAIRS, Ingredient.ofItems(TeadBlocks.BRONZE_CUT_BLOCK))
                .criterion(hasItem(TeadBlocks.BRONZE_CUT_BLOCK), conditionsFromItem(TeadBlocks.BRONZE_CUT_BLOCK))
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "bronze_cut_stairs"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, TeadItems.GRAVITY_PEARL)
                .input(Items.BLAZE_POWDER)
                .input(Items.ENDER_PEARL)
                .input(Items.CHORUS_FRUIT)
                .criterion(hasItem(Items.CHORUS_FRUIT), conditionsFromItem(Items.CHORUS_FRUIT))
                .criterion(hasItem(Items.ENDER_PEARL), conditionsFromItem(Items.ENDER_PEARL))
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "gravity_pearl"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.HANDLE)
                .input(Items.STICK)
                .input(Items.LEATHER)
                .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))
                .criterion(hasItem(Items.LEATHER), conditionsFromItem(Items.LEATHER))
                .group("handle")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "handle_1"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.HANDLE)
                .input(Items.STICK)
                .input(TeadItems.FABRIC)
                .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .group("handle")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "handle_2"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.BAMBOO)
                .input(Items.BAMBOO)
                .input(ItemTags.FLOWERS)
                .input(ItemTags.FLOWERS)
                .input(ItemTags.FLOWERS)
                .input(ItemTags.FLOWERS)
                .criterion(hasItem(Items.BAMBOO), conditionsFromItem(Items.BAMBOO))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_1"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.WHITE_WOOL)
                .input(Items.WHITE_WOOL)
                .criterion(hasItem(Items.WHITE_WOOL), conditionsFromItem(Items.WHITE_WOOL))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_2"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.WHITE_WOOL)
                .input(Items.BROWN_WOOL)
                .criterion(hasItem(Items.WHITE_WOOL), conditionsFromItem(Items.WHITE_WOOL))
                .criterion(hasItem(Items.BROWN_WOOL), conditionsFromItem(Items.BROWN_WOOL))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_3"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.WHITE_WOOL)
                .input(Items.STRING)
                .input(Items.STRING)
                .input(Items.STRING)
                .input(Items.STRING)
                .criterion(hasItem(Items.WHITE_WOOL), conditionsFromItem(Items.WHITE_WOOL))
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_4"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.BROWN_WOOL)
                .input(Items.STRING)
                .input(Items.STRING)
                .input(Items.STRING)
                .input(Items.STRING)
                .criterion(hasItem(Items.BROWN_WOOL), conditionsFromItem(Items.BROWN_WOOL))
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_5"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.HANGING_ROOTS)
                .input(Items.HANGING_ROOTS)
                .input(Items.HANGING_ROOTS)
                .input(Items.HANGING_ROOTS)
                .input(Items.HANGING_ROOTS)
                .input(Items.HANGING_ROOTS)
                .criterion(hasItem(Items.HANGING_ROOTS), conditionsFromItem(Items.HANGING_ROOTS))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_6"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.WHEAT)
                .input(Items.WHEAT)
                .input(Items.WHEAT)
                .input(Items.BAMBOO)
                .input(Items.BAMBOO)
                .criterion(hasItem(Items.BAMBOO), conditionsFromItem(Items.BAMBOO))
                .criterion(hasItem(Items.WHEAT), conditionsFromItem(Items.WHEAT))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_7"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.WHEAT)
                .input(Items.WHEAT)
                .input(Items.WHEAT)
                .input(Items.STRING)
                .input(Items.STRING)
                .input(Items.STRING)
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .criterion(hasItem(Items.WHEAT), conditionsFromItem(Items.WHEAT))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_8"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.TWISTING_VINES)
                .input(Items.TWISTING_VINES)
                .input(Items.TWISTING_VINES)
                .input(Items.NETHER_SPROUTS)
                .input(Items.NETHER_SPROUTS)
                .input(Items.NETHER_SPROUTS)
                .criterion(hasItem(Items.NETHER_SPROUTS), conditionsFromItem(Items.NETHER_SPROUTS))
                .criterion(hasItem(Items.TWISTING_VINES), conditionsFromItem(Items.TWISTING_VINES))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_9"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.FABRIC)
                .input(Items.CRIMSON_FUNGUS)
                .input(Items.CRIMSON_FUNGUS)
                .input(Items.STRING)
                .input(Items.STRING)
                .input(Items.STRING)
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .criterion(hasItem(Items.CRIMSON_FUNGUS), conditionsFromItem(Items.CRIMSON_FUNGUS))
                .group("fabric")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "fabric_0"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(ItemTags.FISHES)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.TROPICAL_FISH), conditionsFromItem(Items.TROPICAL_FISH))
                .criterion(hasItem(Items.SALMON), conditionsFromItem(Items.SALMON))
                .criterion(hasItem(Items.COD), conditionsFromItem(Items.COD))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_0"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.ROTTEN_FLESH)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.ROTTEN_FLESH), conditionsFromItem(Items.ROTTEN_FLESH))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_1"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.BEEF)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.BEEF), conditionsFromItem(Items.BEEF))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_2"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.PORKCHOP)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.PORKCHOP), conditionsFromItem(Items.PORKCHOP))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_3"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 2)
                .input(Items.CHICKEN)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.CHICKEN), conditionsFromItem(Items.CHICKEN))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_4"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.RABBIT)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.RABBIT), conditionsFromItem(Items.RABBIT))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_5"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.MUTTON)
                .input(Items.SUGAR)
                .input(Items.COCOA_BEANS)
                .criterion(hasItem(Items.MUTTON), conditionsFromItem(Items.MUTTON))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.COCOA_BEANS), conditionsFromItem(Items.COCOA_BEANS))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_6"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.ROTTEN_FLESH)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.ROTTEN_FLESH), conditionsFromItem(Items.ROTTEN_FLESH))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_7"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(ItemTags.FISHES)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.TROPICAL_FISH), conditionsFromItem(Items.TROPICAL_FISH))
                .criterion(hasItem(Items.SALMON), conditionsFromItem(Items.SALMON))
                .criterion(hasItem(Items.COD), conditionsFromItem(Items.COD))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_8"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.PORKCHOP)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.PORKCHOP), conditionsFromItem(Items.PORKCHOP))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_9"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.BEEF)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.BEEF), conditionsFromItem(Items.BEEF))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_10"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 2)
                .input(Items.CHICKEN)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.CHICKEN), conditionsFromItem(Items.CHICKEN))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_11"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.RABBIT)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.RABBIT), conditionsFromItem(Items.RABBIT))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_12"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.JERKY, 3)
                .input(Items.MUTTON)
                .input(Items.SUGAR)
                .input(Items.GUNPOWDER)
                .criterion(hasItem(Items.MUTTON), conditionsFromItem(Items.MUTTON))
                .criterion(hasItem(Items.SUGAR), conditionsFromItem(Items.SUGAR))
                .criterion(hasItem(Items.GUNPOWDER), conditionsFromItem(Items.GUNPOWDER))
                .group("jerky")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "jerky_13"));
        ShapelessRecipeJsonBuilder.create(RecipeCategory.COMBAT, Items.BOOK)
                .input(Items.PAPER)
                .input(Items.PAPER)
                .input(Items.PAPER)
                .input(TeadItems.FABRIC)
                .criterion(hasItem(Items.PAPER), conditionsFromItem(Items.PAPER))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.AMETHYST_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.AMETHYST_SHARD)
                .criterion(hasItem(Items.AMETHYST_SHARD), conditionsFromItem(Items.AMETHYST_SHARD))
                .group("amethyst_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "amethyst_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.AMETHYST_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.AMETHYST_SHARD)
                .criterion(hasItem(Items.AMETHYST_SHARD), conditionsFromItem(Items.AMETHYST_SHARD))
                .group("amethyst_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "amethyst_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.TNT_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.TNT)
                .criterion(hasItem(Items.TNT), conditionsFromItem(Items.TNT))
                .group("tnt_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "tnt_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.TNT_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.TNT)
                .criterion(hasItem(Items.TNT), conditionsFromItem(Items.TNT))
                .group("tnt_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "tnt_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.TORCH_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.COAL)
                .criterion(hasItem(Items.COAL), conditionsFromItem(Items.COAL))
                .group("torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "torch_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.TORCH_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.COAL)
                .criterion(hasItem(Items.COAL), conditionsFromItem(Items.COAL))
                .group("torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "torch_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.TORCH_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.CHARCOAL)
                .criterion(hasItem(Items.CHARCOAL), conditionsFromItem(Items.CHARCOAL))
                .group("torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "torch_arrow_3"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.TORCH_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.CHARCOAL)
                .criterion(hasItem(Items.CHARCOAL), conditionsFromItem(Items.CHARCOAL))
                .group("torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "torch_arrow_4"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.SOUL_TORCH_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.SOUL_SAND)
                .criterion(hasItem(Items.SOUL_SAND), conditionsFromItem(Items.SOUL_SAND))
                .group("soul_torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "soul_torch_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.SOUL_TORCH_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.SOUL_SAND)
                .criterion(hasItem(Items.SOUL_SAND), conditionsFromItem(Items.SOUL_SAND))
                .group("soul_torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "soul_torch_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.SOUL_TORCH_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.SOUL_SOIL)
                .criterion(hasItem(Items.SOUL_SOIL), conditionsFromItem(Items.SOUL_SOIL))
                .group("soul_torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "soul_torch_arrow_3"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.SOUL_TORCH_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.SOUL_SOIL)
                .criterion(hasItem(Items.SOUL_SOIL), conditionsFromItem(Items.SOUL_SOIL))
                .group("soul_torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "soul_torch_arrow_4"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.REDSTONE_TORCH_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.REDSTONE)
                .criterion(hasItem(Items.REDSTONE), conditionsFromItem(Items.REDSTONE))
                .group("redstone_torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "redstone_torch_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.REDSTONE_TORCH_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.REDSTONE)
                .criterion(hasItem(Items.REDSTONE), conditionsFromItem(Items.REDSTONE))
                .group("redstone_torch_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "redstone_torch_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.BORING_ARROW, 1)
                .pattern("%%$")
                .pattern("%#%")
                .pattern("%%%")
                .input('%', Items.TNT)
                .input('#', TeadItems.TNT_ARROW)
                .input('$', Items.IRON_PICKAXE)
                .criterion(hasItem(TeadItems.TNT_ARROW), conditionsFromItem(TeadItems.TNT_ARROW))
                .group("boring_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "boring_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.BORING_ARROW, 1)
                .pattern("%$%")
                .pattern("%#%")
                .pattern("%%%")
                .input('%', Items.TNT)
                .input('#', TeadItems.TNT_ARROW)
                .input('$', Items.IRON_PICKAXE)
                .criterion(hasItem(TeadItems.TNT_ARROW), conditionsFromItem(TeadItems.TNT_ARROW))
                .group("boring_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "boring_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.COPPER_ARROW, 3)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.LIGHTNING_ROD)
                .criterion(hasItem(Items.LIGHTNING_ROD), conditionsFromItem(Items.LIGHTNING_ROD))
                .group("copper_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "cooper_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.COPPER_ARROW, 3)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.LIGHTNING_ROD)
                .criterion(hasItem(Items.LIGHTNING_ROD), conditionsFromItem(Items.LIGHTNING_ROD))
                .group("copper_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "cooper_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.ENDER_PEARL_ARROW, 1)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.ENDER_PEARL)
                .criterion(hasItem(Items.ENDER_PEARL), conditionsFromItem(Items.ENDER_PEARL))
                .group("ender_pearl_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "ender_pearl_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.ENDER_PEARL_ARROW, 1)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.ENDER_PEARL)
                .criterion(hasItem(Items.ENDER_PEARL), conditionsFromItem(Items.ENDER_PEARL))
                .group("ender_pearl_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "ender_pearl_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.OBSIDIAN_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', TeadItems.OBSIDIAN_SHARD)
                .criterion(hasItem(Items.FEATHER), conditionsFromItem(Items.FEATHER))
                .criterion(hasItem(TeadItems.OBSIDIAN_SHARD), conditionsFromItem(TeadItems.OBSIDIAN_SHARD))
                .group("obsidian_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "obsidian_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.OBSIDIAN_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', TeadItems.OBSIDIAN_SHARD)
                .criterion(hasItem(Items.FEATHER), conditionsFromItem(Items.FEATHER))
                .criterion(hasItem(TeadItems.OBSIDIAN_SHARD), conditionsFromItem(TeadItems.OBSIDIAN_SHARD))
                .group("obsidian_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "obsidian_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.RUBY_ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', TeadItems.RUBY)
                .criterion(hasItem(TeadItems.RUBY), conditionsFromItem(TeadItems.RUBY))
                .group("ruby_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "ruby_arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, TeadItems.RUBY_ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', TeadItems.RUBY)
                .criterion(hasItem(TeadItems.RUBY), conditionsFromItem(TeadItems.RUBY))
                .group("ruby_arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "ruby_arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, Items.ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.FLINT)
                .criterion(hasItem(Items.FEATHER), conditionsFromItem(Items.FEATHER))
                .criterion(hasItem(Items.FLINT), conditionsFromItem(Items.FLINT))
                .group("arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "arrow_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, Items.ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.FLINT)
                .criterion(hasItem(Items.FEATHER), conditionsFromItem(Items.FEATHER))
                .criterion(hasItem(Items.FLINT), conditionsFromItem(Items.FLINT))
                .group("arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "arrow_2"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, Items.ARROW, 4)
                .pattern("  $")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.IRON_INGOT)
                .criterion(hasItem(Items.FEATHER), conditionsFromItem(Items.FEATHER))
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .group("arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "arrow_3"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.COMBAT, Items.ARROW, 4)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', Items.FEATHER)
                .input('#', Items.STICK)
                .input('$', Items.IRON_INGOT)
                .criterion(hasItem(Items.FEATHER), conditionsFromItem(Items.FEATHER))
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .group("arrow")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "arrow_4"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LIGHTNING_STAFF, 1)
                .pattern("  %")
                .pattern(" # ")
                .pattern("#  ")
                .input('%', Items.AMETHYST_SHARD)
                .input('#', Items.LIGHTNING_ROD)
                .criterion(hasItem(Items.LIGHTNING_ROD), conditionsFromItem(Items.LIGHTNING_ROD))
                .criterion(hasItem(Items.AMETHYST_SHARD), conditionsFromItem(Items.AMETHYST_SHARD))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, Items.SADDLE, 1)
                .pattern("###")
                .pattern(" % ")
                .pattern(" $ ")
                .input('#', Items.LEATHER)
                .input('%', Items.LEAD)
                .input('$', Items.TRIPWIRE_HOOK)
                .criterion(hasItem(Items.LEATHER), conditionsFromItem(Items.LEATHER))
                .criterion(hasItem(Items.LEAD), conditionsFromItem(Items.LEAD))
                .criterion(hasItem(Items.TRIPWIRE_HOOK), conditionsFromItem(Items.TRIPWIRE_HOOK))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.FOOD, TeadItems.WHITE_GOLD_POTATO, 1)
                .pattern("###")
                .pattern("#%#")
                .pattern("###")
                .input('%', Items.POTATO)
                .input('#', TeadItems.WHITE_GOLD_INGOT)
                .criterion(hasItem(TeadItems.WHITE_GOLD_INGOT), conditionsFromItem(TeadItems.WHITE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.FOOD, TeadItems.ROSE_GOLD_BEETROOT, 1)
                .pattern("###")
                .pattern("#%#")
                .pattern("###")
                .input('%', Items.BEETROOT)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.FOOD, TeadItems.LEAD_APPLE, 1)
                .pattern("###")
                .pattern("#%#")
                .pattern("###")
                .input('%', Items.APPLE)
                .input('#', TeadItems.LEAD_INGOT)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_PICKAXE, 1)
                .pattern("###")
                .pattern(" $ ")
                .pattern(" % ")
                .input('%', Items.STICK)
                .input('#', TeadItems.LEAD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_SHOVEL, 1)
                .pattern("#")
                .pattern("%")
                .pattern("%")
                .input('%', Items.STICK)
                .input('#', TeadItems.LEAD_INGOT)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_SWORD, 1)
                .pattern("#")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadItems.LEAD_INGOT)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_AXE, 1)
                .pattern("##")
                .pattern("#%")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.LEAD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_HOE, 1)
                .pattern("##")
                .pattern(" %")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.LEAD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', TeadItems.LEAD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('#', TeadItems.LEAD_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('#', TeadItems.LEAD_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('#', TeadItems.LEAD_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LEAD_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('#', TeadItems.LEAD_INGOT)
                .input('%', Items.STICK)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.WOOD_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', ItemTags.PLANKS)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.ACACIA_PLANKS), conditionsFromItem(Items.ACACIA_PLANKS))
                .criterion(hasItem(Items.BAMBOO_PLANKS), conditionsFromItem(Items.BAMBOO_PLANKS))
                .criterion(hasItem(Items.BIRCH_PLANKS), conditionsFromItem(Items.BIRCH_PLANKS))
                .criterion(hasItem(Items.CHERRY_PLANKS), conditionsFromItem(Items.CHERRY_PLANKS))
                .criterion(hasItem(Items.CRIMSON_PLANKS), conditionsFromItem(Items.CRIMSON_PLANKS))
                .criterion(hasItem(Items.JUNGLE_PLANKS), conditionsFromItem(Items.JUNGLE_PLANKS))
                .criterion(hasItem(Items.DARK_OAK_PLANKS), conditionsFromItem(Items.DARK_OAK_PLANKS))
                .criterion(hasItem(Items.MANGROVE_PLANKS), conditionsFromItem(Items.MANGROVE_PLANKS))
                .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
                .criterion(hasItem(Items.SPRUCE_PLANKS), conditionsFromItem(Items.SPRUCE_PLANKS))
                .criterion(hasItem(Items.WARPED_PLANKS), conditionsFromItem(Items.WARPED_PLANKS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.WOOD_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('%', TeadItems.HANDLE)
                .input('#', ItemTags.PLANKS)
                .criterion(hasItem(Items.ACACIA_PLANKS), conditionsFromItem(Items.ACACIA_PLANKS))
                .criterion(hasItem(Items.BAMBOO_PLANKS), conditionsFromItem(Items.BAMBOO_PLANKS))
                .criterion(hasItem(Items.BIRCH_PLANKS), conditionsFromItem(Items.BIRCH_PLANKS))
                .criterion(hasItem(Items.CHERRY_PLANKS), conditionsFromItem(Items.CHERRY_PLANKS))
                .criterion(hasItem(Items.CRIMSON_PLANKS), conditionsFromItem(Items.CRIMSON_PLANKS))
                .criterion(hasItem(Items.JUNGLE_PLANKS), conditionsFromItem(Items.JUNGLE_PLANKS))
                .criterion(hasItem(Items.DARK_OAK_PLANKS), conditionsFromItem(Items.DARK_OAK_PLANKS))
                .criterion(hasItem(Items.MANGROVE_PLANKS), conditionsFromItem(Items.MANGROVE_PLANKS))
                .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
                .criterion(hasItem(Items.SPRUCE_PLANKS), conditionsFromItem(Items.SPRUCE_PLANKS))
                .criterion(hasItem(Items.WARPED_PLANKS), conditionsFromItem(Items.WARPED_PLANKS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.WOOD_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', ItemTags.PLANKS)
                .criterion(hasItem(Items.ACACIA_PLANKS), conditionsFromItem(Items.ACACIA_PLANKS))
                .criterion(hasItem(Items.BAMBOO_PLANKS), conditionsFromItem(Items.BAMBOO_PLANKS))
                .criterion(hasItem(Items.BIRCH_PLANKS), conditionsFromItem(Items.BIRCH_PLANKS))
                .criterion(hasItem(Items.CHERRY_PLANKS), conditionsFromItem(Items.CHERRY_PLANKS))
                .criterion(hasItem(Items.CRIMSON_PLANKS), conditionsFromItem(Items.CRIMSON_PLANKS))
                .criterion(hasItem(Items.JUNGLE_PLANKS), conditionsFromItem(Items.JUNGLE_PLANKS))
                .criterion(hasItem(Items.DARK_OAK_PLANKS), conditionsFromItem(Items.DARK_OAK_PLANKS))
                .criterion(hasItem(Items.MANGROVE_PLANKS), conditionsFromItem(Items.MANGROVE_PLANKS))
                .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
                .criterion(hasItem(Items.SPRUCE_PLANKS), conditionsFromItem(Items.SPRUCE_PLANKS))
                .criterion(hasItem(Items.WARPED_PLANKS), conditionsFromItem(Items.WARPED_PLANKS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.WOOD_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('%', Items.STICK)
                .input('#', ItemTags.PLANKS)
                .criterion(hasItem(Items.ACACIA_PLANKS), conditionsFromItem(Items.ACACIA_PLANKS))
                .criterion(hasItem(Items.BAMBOO_PLANKS), conditionsFromItem(Items.BAMBOO_PLANKS))
                .criterion(hasItem(Items.BIRCH_PLANKS), conditionsFromItem(Items.BIRCH_PLANKS))
                .criterion(hasItem(Items.CHERRY_PLANKS), conditionsFromItem(Items.CHERRY_PLANKS))
                .criterion(hasItem(Items.CRIMSON_PLANKS), conditionsFromItem(Items.CRIMSON_PLANKS))
                .criterion(hasItem(Items.JUNGLE_PLANKS), conditionsFromItem(Items.JUNGLE_PLANKS))
                .criterion(hasItem(Items.DARK_OAK_PLANKS), conditionsFromItem(Items.DARK_OAK_PLANKS))
                .criterion(hasItem(Items.MANGROVE_PLANKS), conditionsFromItem(Items.MANGROVE_PLANKS))
                .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
                .criterion(hasItem(Items.SPRUCE_PLANKS), conditionsFromItem(Items.SPRUCE_PLANKS))
                .criterion(hasItem(Items.WARPED_PLANKS), conditionsFromItem(Items.WARPED_PLANKS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.WOOD_RAPIER, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', ItemTags.PLANKS)
                .criterion(hasItem(Items.ACACIA_PLANKS), conditionsFromItem(Items.ACACIA_PLANKS))
                .criterion(hasItem(Items.BAMBOO_PLANKS), conditionsFromItem(Items.BAMBOO_PLANKS))
                .criterion(hasItem(Items.BIRCH_PLANKS), conditionsFromItem(Items.BIRCH_PLANKS))
                .criterion(hasItem(Items.CHERRY_PLANKS), conditionsFromItem(Items.CHERRY_PLANKS))
                .criterion(hasItem(Items.CRIMSON_PLANKS), conditionsFromItem(Items.CRIMSON_PLANKS))
                .criterion(hasItem(Items.JUNGLE_PLANKS), conditionsFromItem(Items.JUNGLE_PLANKS))
                .criterion(hasItem(Items.DARK_OAK_PLANKS), conditionsFromItem(Items.DARK_OAK_PLANKS))
                .criterion(hasItem(Items.MANGROVE_PLANKS), conditionsFromItem(Items.MANGROVE_PLANKS))
                .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
                .criterion(hasItem(Items.SPRUCE_PLANKS), conditionsFromItem(Items.SPRUCE_PLANKS))
                .criterion(hasItem(Items.WARPED_PLANKS), conditionsFromItem(Items.WARPED_PLANKS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.WOOD_SCYTHE, 1)
                .pattern("###")
                .pattern(" %%")
                .pattern("%  ")
                .input('%', Items.STICK)
                .input('#', ItemTags.PLANKS)
                .criterion(hasItem(Items.ACACIA_PLANKS), conditionsFromItem(Items.ACACIA_PLANKS))
                .criterion(hasItem(Items.BAMBOO_PLANKS), conditionsFromItem(Items.BAMBOO_PLANKS))
                .criterion(hasItem(Items.BIRCH_PLANKS), conditionsFromItem(Items.BIRCH_PLANKS))
                .criterion(hasItem(Items.CHERRY_PLANKS), conditionsFromItem(Items.CHERRY_PLANKS))
                .criterion(hasItem(Items.CRIMSON_PLANKS), conditionsFromItem(Items.CRIMSON_PLANKS))
                .criterion(hasItem(Items.JUNGLE_PLANKS), conditionsFromItem(Items.JUNGLE_PLANKS))
                .criterion(hasItem(Items.DARK_OAK_PLANKS), conditionsFromItem(Items.DARK_OAK_PLANKS))
                .criterion(hasItem(Items.MANGROVE_PLANKS), conditionsFromItem(Items.MANGROVE_PLANKS))
                .criterion(hasItem(Items.OAK_PLANKS), conditionsFromItem(Items.OAK_PLANKS))
                .criterion(hasItem(Items.SPRUCE_PLANKS), conditionsFromItem(Items.SPRUCE_PLANKS))
                .criterion(hasItem(Items.WARPED_PLANKS), conditionsFromItem(Items.WARPED_PLANKS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', TeadTags.Items.ROCKS)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadTags.Items.ROCKS)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadTags.Items.ROCKS)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('%', Items.STICK)
                .input('#', TeadTags.Items.ROCKS)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_RAPIER, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern("%# ")
                .input('%', Items.STICK)
                .input('#', TeadTags.Items.ROCKS)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_SCYTHE, 1)
                .pattern("###")
                .pattern(" %%")
                .pattern("%  ")
                .input('%', Items.STICK)
                .input('#', TeadTags.Items.ROCKS)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STONE_GREATSWORD, 1)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('$', TeadTags.Items.ROCKS)
                .input('#', ItemTags.STONE_TOOL_MATERIALS)
                .criterion(hasItem(Items.COBBLESTONE), conditionsFromItem(Items.COBBLESTONE))
                .criterion(hasItem(Items.COBBLED_DEEPSLATE), conditionsFromItem(Items.COBBLED_DEEPSLATE))
                .criterion(hasItem(Items.BLACKSTONE), conditionsFromItem(Items.BLACKSTONE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', Items.GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_MATTOCK, 1)
                .pattern("###")
                .pattern(" %#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', Items.GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_SPEAR, 1)
                .pattern("  #")
                .pattern(" $ ")
                .pattern("%  ")
                .input('%', Items.STICK)
                .input('#', Items.GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_HATCHET, 1)
                .pattern("## ")
                .pattern("#$ ")
                .pattern("   ")
                .input('#', Items.GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_HAMMER, 1)
                .pattern("###")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('$', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_MACE, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('%', Items.STICK)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_KATANA, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern("%  ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_CUTLASS, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern(" % ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_SCYTHE, 1)
                .pattern("###")
                .pattern(" %%")
                .pattern("%  ")
                .input('%', Items.STICK)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_LONGSWORD, 1)
                .pattern(" # ")
                .pattern(" # ")
                .pattern("#%#")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', Items.IRON_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('%', Items.STICK)
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_RAPIER, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_SCYTHE, 1)
                .pattern("###")
                .pattern(" %%")
                .pattern("%  ")
                .input('%', Items.STICK)
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.IRON_GREATSWORD, 1)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('$', Items.IRON_INGOT)
                .input('#', Items.IRON_BLOCK)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .criterion(hasItem(Items.IRON_BLOCK), conditionsFromItem(Items.IRON_BLOCK))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_PICKAXE, 1)
                .pattern("###")
                .pattern(" $ ")
                .pattern(" % ")
                .input('%', Items.STICK)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_SHOVEL, 1)
                .pattern("#")
                .pattern("%")
                .pattern("%")
                .input('%', Items.STICK)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_SWORD, 1)
                .pattern("#")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_AXE, 1)
                .pattern("##")
                .pattern("#%")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_HOE, 1)
                .pattern("##")
                .pattern(" %")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('%', Items.STICK)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_PICKAXE, 1)
                .pattern("###")
                .pattern(" $ ")
                .pattern(" % ")
                .input('%', Items.STICK)
                .input('#', TeadItems.BRONZE_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_SHOVEL, 1)
                .pattern("#")
                .pattern("%")
                .pattern("%")
                .input('%', Items.STICK)
                .input('#', TeadItems.BRONZE_INGOT)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_SWORD, 1)
                .pattern("#")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadItems.BRONZE_INGOT)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_AXE, 1)
                .pattern("##")
                .pattern("#%")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.BRONZE_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_HOE, 1)
                .pattern("##")
                .pattern(" %")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.BRONZE_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', TeadItems.BRONZE_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('#', TeadItems.BRONZE_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('#', TeadItems.BRONZE_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('#', TeadItems.BRONZE_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('#', TeadItems.BRONZE_INGOT)
                .input('%', Items.STICK)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_PICKAXE, 1)
                .pattern("###")
                .pattern(" $ ")
                .pattern(" % ")
                .input('%', Items.STICK)
                .input('#', TeadItems.STEEL_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_SHOVEL, 1)
                .pattern("#")
                .pattern("%")
                .pattern("%")
                .input('%', Items.STICK)
                .input('#', TeadItems.STEEL_INGOT)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_SWORD, 1)
                .pattern("#")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadItems.STEEL_INGOT)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_AXE, 1)
                .pattern("##")
                .pattern("#%")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.STEEL_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_HOE, 1)
                .pattern("##")
                .pattern(" %")
                .pattern(" $")
                .input('%', Items.STICK)
                .input('#', TeadItems.STEEL_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', TeadItems.STEEL_INGOT)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('#', TeadItems.STEEL_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('#', TeadItems.STEEL_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('#', TeadItems.STEEL_INGOT)
                .input('%', TeadItems.HANDLE)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('#', TeadItems.STEEL_INGOT)
                .input('%', Items.STICK)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_DOUBLE_AXE, 1)
                .pattern("#%#")
                .pattern("#%#")
                .pattern(" $ ")
                .input('%', Items.STICK)
                .input('#', Items.DIAMOND)
                .input('$', TeadItems.HANDLE)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_HAMMER, 1)
                .pattern(" ##")
                .pattern(" ##")
                .pattern("%  ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.DIAMOND)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_SICKLE, 1)
                .pattern(" # ")
                .pattern("  #")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.DIAMOND)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_CLAYMORE, 1)
                .pattern("  #")
                .pattern("## ")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.DIAMOND)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_DAGGER, 1)
                .pattern(" #")
                .pattern("% ")
                .input('%', Items.STICK)
                .input('#', Items.DIAMOND)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_RAPIER, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.DIAMOND)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_SCYTHE, 1)
                .pattern("###")
                .pattern(" %%")
                .pattern("%  ")
                .input('%', Items.STICK)
                .input('#', Items.DIAMOND)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.DIAMOND_GREATSWORD, 1)
                .pattern("$")
                .pattern("#")
                .pattern("%")
                .input('%', TeadItems.HANDLE)
                .input('$', Items.DIAMOND)
                .input('#', Items.DIAMOND_BLOCK)
                .criterion(hasItem(Items.DIAMOND), conditionsFromItem(Items.DIAMOND))
                .criterion(hasItem(Items.DIAMOND_BLOCK), conditionsFromItem(Items.DIAMOND_BLOCK))
                .offerTo(exporter);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_DOUBLE_AXE, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_DOUBLE_AXE);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_HAMMER, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_HAMMER);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_SICKLE, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_SICKLE);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_CLAYMORE, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_CLAYMORE);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_DAGGER, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_DAGGER);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_RAPIER, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_RAPIER);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_GREATSWORD, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_GREATSWORD);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_SCYTHE, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_SCYTHE);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.RUBY_POWER_BOW, 1)
                .pattern(" #$")
                .pattern("# $")
                .pattern(" #$")
                .input('#', TeadItems.RUBY_INGOT)
                .input('$', Items.STRING)
                .criterion(hasItem(TeadItems.RUBY_INGOT), conditionsFromItem(TeadItems.RUBY_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.OBSIDIAN_INGOT, 1)
                .pattern("###")
                .pattern("#%#")
                .pattern("###")
                .input('%', TeadItems.STEEL_INGOT)
                .input('#', TeadItems.OBSIDIAN_SHARD)
                .criterion(hasItem(TeadItems.OBSIDIAN_INGOT), conditionsFromItem(TeadItems.OBSIDIAN_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.OBSIDIAN_BLADE, 1)
                .pattern(" $#")
                .pattern("##$")
                .pattern("%# ")
                .input('%', TeadItems.HANDLE)
                .input('#', TeadItems.OBSIDIAN_INGOT)
                .input('$', TeadItems.OBSIDIAN_SHARD)
                .criterion(hasItem(TeadItems.OBSIDIAN_INGOT), conditionsFromItem(TeadItems.OBSIDIAN_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STARLESS_NIGHT, 1)
                .pattern(" ##")
                .pattern("#%#")
                .pattern(" # ")
                .input('%', TeadItems.OBSIDIAN_BLADE)
                .input('#', Items.ENDER_PEARL)
                .criterion(hasItem(TeadItems.OBSIDIAN_INGOT), conditionsFromItem(TeadItems.OBSIDIAN_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BATTLE_STAFF, 1)
                .pattern("  #")
                .pattern(" % ")
                .pattern("#  ")
                .input('%', TeadItems.HANDLE)
                .input('#', Items.STICK)
                .criterion(hasItem(TeadItems.HANDLE), conditionsFromItem(TeadItems.HANDLE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.QUARTERSTAFF, 1)
                .pattern("  #")
                .pattern(" # ")
                .pattern("#  ")
                .input('#', Items.STICK)
                .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BONE_CLUB, 1)
                .pattern("  %")
                .pattern(" % ")
                .pattern("#  ")
                .input('#', Items.STICK)
                .input('%', Items.BONE_BLOCK)
                .criterion(hasItem(Items.BONE), conditionsFromItem(Items.BONE))
                .criterion(hasItem(Items.BONE_BLOCK), conditionsFromItem(Items.BONE_BLOCK))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BONE_BOW, 1)
                .pattern(" #%")
                .pattern("# %")
                .pattern(" #%")
                .input('#', Items.BONE)
                .input('%', Items.STRING)
                .criterion(hasItem(Items.BONE), conditionsFromItem(Items.BONE))
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.SHORT_BOW, 1)
                .pattern(" #%")
                .pattern("#% ")
                .input('#', Items.STICK)
                .input('%', Items.STRING)
                .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.LONG_BOW, 1)
                .pattern(" ##")
                .pattern("# %")
                .pattern("#%%")
                .input('#', Items.STICK)
                .input('%', Items.STRING)
                .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))
                .criterion(hasItem(Items.STRING), conditionsFromItem(Items.STRING))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.FIREBOLT_THROWER, 1)
                .pattern("&$&")
                .pattern("%#%")
                .pattern("%%%")
                .input('#', Items.CROSSBOW)
                .input('%', Items.STRING)
                .input('$', Items.FLINT_AND_STEEL)
                .input('&', Items.RED_DYE)
                .criterion(hasItem(Items.FLINT_AND_STEEL), conditionsFromItem(Items.FLINT_AND_STEEL))
                .criterion(hasItem(Items.CROSSBOW), conditionsFromItem(Items.CROSSBOW))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.ITEM_FRAME, 1)
                .pattern("%%%")
                .pattern("%#%")
                .pattern("%%%")
                .input('#', TeadItems.FABRIC)
                .input('%', Items.STICK)
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .criterion(hasItem(Items.STICK), conditionsFromItem(Items.STICK))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GRENADE, 1)
                .pattern("$& ")
                .pattern("#%#")
                .pattern(" # ")
                .input('#', Items.IRON_INGOT)
                .input('%', Items.TNT)
                .input('&', Items.REDSTONE)
                .input('$', Items.FLINT_AND_STEEL)
                .criterion(hasItem(Items.FLINT_AND_STEEL), conditionsFromItem(Items.FLINT_AND_STEEL))
                .criterion(hasItem(Items.TNT), conditionsFromItem(Items.TNT))
                .group("grenade")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "grenade"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.SHURIKEN, 6)
                .pattern(" # ")
                .pattern("# #")
                .pattern(" # ")
                .input('#', Items.IRON_INGOT)
                .criterion(hasItem(Items.IRON_INGOT), conditionsFromItem(Items.IRON_INGOT))
                .group("shuriken")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "shuriken_0"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.SHURIKEN, 6)
                .pattern(" # ")
                .pattern("# #")
                .pattern(" # ")
                .input('#', TeadItems.LEAD_INGOT)
                .criterion(hasItem(TeadItems.LEAD_INGOT), conditionsFromItem(TeadItems.LEAD_INGOT))
                .group("shuriken")
                .offerTo(exporter, new Identifier(Tead.MOD_ID, "shuriken_1"));
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadBlocks.STEEL_CHAIN, 1)
                .pattern("%")
                .pattern("#")
                .pattern("%")
                .input('#', TeadItems.STEEL_INGOT)
                .input('%', TeadItems.STEEL_NUGGET)
                .criterion(hasItem(TeadItems.STEEL_INGOT), conditionsFromItem(TeadItems.STEEL_INGOT))
                .criterion(hasItem(TeadItems.STEEL_NUGGET), conditionsFromItem(TeadItems.STEEL_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadBlocks.ROSE_GOLD_CHAIN, 1)
                .pattern("%")
                .pattern("#")
                .pattern("%")
                .input('#', TeadItems.ROSE_GOLD_INGOT)
                .input('%', TeadItems.ROSE_GOLD_NUGGET)
                .criterion(hasItem(TeadItems.ROSE_GOLD_INGOT), conditionsFromItem(TeadItems.ROSE_GOLD_INGOT))
                .criterion(hasItem(TeadItems.ROSE_GOLD_NUGGET), conditionsFromItem(TeadItems.ROSE_GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadBlocks.BRONZE_CHAIN, 1)
                .pattern("%")
                .pattern("#")
                .pattern("%")
                .input('#', TeadItems.BRONZE_INGOT)
                .input('%', TeadItems.BRONZE_NUGGET)
                .criterion(hasItem(TeadItems.BRONZE_INGOT), conditionsFromItem(TeadItems.BRONZE_INGOT))
                .criterion(hasItem(TeadItems.BRONZE_NUGGET), conditionsFromItem(TeadItems.BRONZE_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadBlocks.GOLD_CHAIN, 1)
                .pattern("%")
                .pattern("#")
                .pattern("%")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.GOLD_NUGGET)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.CHAINMAIL_BOOTS, 1)
                .pattern("# #")
                .pattern("# #")
                .input('#', Items.CHAIN)
                .criterion(hasItem(Items.CHAIN), conditionsFromItem(Items.CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.CHAINMAIL_HELMET, 1)
                .pattern("###")
                .pattern("# #")
                .input('#', Items.CHAIN)
                .criterion(hasItem(Items.CHAIN), conditionsFromItem(Items.CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.CHAINMAIL_LEGGINGS, 1)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', Items.CHAIN)
                .criterion(hasItem(Items.CHAIN), conditionsFromItem(Items.CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.CHAINMAIL_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', Items.CHAIN)
                .criterion(hasItem(Items.CHAIN), conditionsFromItem(Items.CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_CHAINMAIL_BOOTS, 1)
                .pattern("# #")
                .pattern("# #")
                .input('#',TeadBlocks.STEEL_CHAIN)
                .criterion(hasItem(TeadBlocks.STEEL_CHAIN), conditionsFromItem(TeadBlocks.STEEL_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_CHAINMAIL_HELMET, 1)
                .pattern("###")
                .pattern("# #")
                .input('#', TeadBlocks.STEEL_CHAIN)
                .criterion(hasItem(TeadBlocks.STEEL_CHAIN), conditionsFromItem(TeadBlocks.STEEL_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_CHAINMAIL_LEGGINGS, 1)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', TeadBlocks.STEEL_CHAIN)
                .criterion(hasItem(TeadBlocks.STEEL_CHAIN), conditionsFromItem(TeadBlocks.STEEL_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.STEEL_CHAINMAIL_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', TeadBlocks.STEEL_CHAIN)
                .criterion(hasItem(TeadBlocks.STEEL_CHAIN), conditionsFromItem(TeadBlocks.STEEL_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_CHAINMAIL_BOOTS, 1)
                .pattern("# #")
                .pattern("# #")
                .input('#',TeadBlocks.ROSE_GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.ROSE_GOLD_CHAIN), conditionsFromItem(TeadBlocks.ROSE_GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_CHAINMAIL_HELMET, 1)
                .pattern("###")
                .pattern("# #")
                .input('#', TeadBlocks.ROSE_GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.ROSE_GOLD_CHAIN), conditionsFromItem(TeadBlocks.ROSE_GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_CHAINMAIL_LEGGINGS, 1)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', TeadBlocks.ROSE_GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.ROSE_GOLD_CHAIN), conditionsFromItem(TeadBlocks.ROSE_GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROSE_GOLD_CHAINMAIL_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', TeadBlocks.ROSE_GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.ROSE_GOLD_CHAIN), conditionsFromItem(TeadBlocks.ROSE_GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_CHAINMAIL_BOOTS, 1)
                .pattern("# #")
                .pattern("# #")
                .input('#',TeadBlocks.BRONZE_CHAIN)
                .criterion(hasItem(TeadBlocks.BRONZE_CHAIN), conditionsFromItem(TeadBlocks.BRONZE_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_CHAINMAIL_HELMET, 1)
                .pattern("###")
                .pattern("# #")
                .input('#', TeadBlocks.BRONZE_CHAIN)
                .criterion(hasItem(TeadBlocks.BRONZE_CHAIN), conditionsFromItem(TeadBlocks.BRONZE_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_CHAINMAIL_LEGGINGS, 1)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', TeadBlocks.BRONZE_CHAIN)
                .criterion(hasItem(TeadBlocks.BRONZE_CHAIN), conditionsFromItem(TeadBlocks.BRONZE_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.BRONZE_CHAINMAIL_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', TeadBlocks.BRONZE_CHAIN)
                .criterion(hasItem(TeadBlocks.BRONZE_CHAIN), conditionsFromItem(TeadBlocks.BRONZE_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadBlocks.DARK_BRICKS, 1)
                .pattern("##")
                .pattern("##")
                .input('#', TeadItems.DARK_BRICK)
                .criterion(hasItem(TeadItems.DARK_BRICK), conditionsFromItem(TeadItems.DARK_BRICK))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.MISC, TeadItems.DARK_BRICK, 4)
                .input(TeadBlocks.DARK_BRICKS)
                .criterion(hasItem(TeadBlocks.DARK_BRICKS), conditionsFromItem(TeadBlocks.DARK_BRICKS))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadBlocks.CLAYISH_MUD, 2)
                .input(Blocks.MUD)
                .input(Blocks.CLAY)
                .criterion(hasItem(Blocks.MUD), conditionsFromItem(Blocks.MUD))
                .criterion(hasItem(Blocks.CLAY), conditionsFromItem(Blocks.CLAY))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadItems.MUDDY_CLAY_BALL, 4)
                .input(Blocks.MUD)
                .input(Items.CLAY_BALL)
                .input(Items.CLAY_BALL)
                .input(Items.CLAY_BALL)
                .input(Items.CLAY_BALL)
                .criterion(hasItem(Blocks.MUD), conditionsFromItem(Blocks.MUD))
                .criterion(hasItem(Items.CLAY_BALL), conditionsFromItem(Items.CLAY_BALL))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadBlocks.EMPTY_BOOKSHELF, 1)
                .pattern("###")
                .pattern("%%%")
                .pattern("###")
                .input('#', ItemTags.PLANKS)
                .input('%', ItemTags.WOODEN_SLABS)
                .criterion(hasItem(Items.ACACIA_SLAB), conditionsFromItem(Items.ACACIA_SLAB))
                .criterion(hasItem(Items.BAMBOO_SLAB), conditionsFromItem(Items.BAMBOO_SLAB))
                .criterion(hasItem(Items.BIRCH_SLAB), conditionsFromItem(Items.BIRCH_SLAB))
                .criterion(hasItem(Items.CHERRY_SLAB), conditionsFromItem(Items.CHERRY_SLAB))
                .criterion(hasItem(Items.CRIMSON_SLAB), conditionsFromItem(Items.CRIMSON_SLAB))
                .criterion(hasItem(Items.JUNGLE_SLAB), conditionsFromItem(Items.JUNGLE_SLAB))
                .criterion(hasItem(Items.DARK_OAK_SLAB), conditionsFromItem(Items.DARK_OAK_SLAB))
                .criterion(hasItem(Items.MANGROVE_SLAB), conditionsFromItem(Items.MANGROVE_SLAB))
                .criterion(hasItem(Items.OAK_SLAB), conditionsFromItem(Items.OAK_SLAB))
                .criterion(hasItem(Items.SPRUCE_SLAB), conditionsFromItem(Items.SPRUCE_SLAB))
                .criterion(hasItem(Items.WARPED_SLAB), conditionsFromItem(Items.WARPED_SLAB))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadBlocks.OLD_BOOKSHELF, 1)
                .pattern("###")
                .pattern("%$%")
                .pattern("###")
                .input('#', ItemTags.PLANKS)
                .input('%', Items.BOOK)
                .input('$', Items.COBWEB)
                .criterion(hasItem(Items.BOOK), conditionsFromItem(Items.BOOK))
                .criterion(hasItem(Items.COBWEB), conditionsFromItem(Items.COBWEB))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadBlocks.SLUDGE, 2)
                .input(Blocks.MUD)
                .input(Blocks.COBBLESTONE)
                .criterion(hasItem(Blocks.MUD), conditionsFromItem(Blocks.MUD))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_CHAINMAIL_BOOTS, 1)
                .pattern("# #")
                .pattern("# #")
                .input('#',TeadBlocks.GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_CHAINMAIL_HELMET, 1)
                .pattern("###")
                .pattern("# #")
                .input('#', TeadBlocks.GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_CHAINMAIL_LEGGINGS, 1)
                .pattern("###")
                .pattern("# #")
                .pattern("# #")
                .input('#', TeadBlocks.GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_CHAINMAIL_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("###")
                .pattern("###")
                .input('#', TeadBlocks.GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_WOOLEN_BOOTS, 1)
                .pattern("% %")
                .pattern("# #")
                .input('#', Items.GOLD_NUGGET)
                .input('%', ItemTags.WOOL)
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_WOOLEN_HELMET, 1)
                .pattern("###")
                .pattern("#$#")
                .input('#', ItemTags.WOOL)
                .input('$', Items.GOLD_NUGGET)
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_WOOLEN_LEGGINGS, 1)
                .pattern("#$#")
                .pattern("# #")
                .pattern("# #")
                .input('#', TeadBlocks.GOLD_CHAIN)
                .input('$', Items.GOLD_NUGGET)
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_WOOLEN_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("$#$")
                .pattern("#@#")
                .input('#', TeadBlocks.GOLD_CHAIN)
                .input('$', Items.GOLD_NUGGET)
                .input('@', TeadItems.GOLD_GARMENT_CHESTPLATE)
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_REINFORCED_MAIL_HELMET, 1)
                .pattern("###")
                .pattern("% %")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadBlocks.GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_REINFORCED_MAIL_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("%#%")
                .pattern("%#%")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadBlocks.GOLD_CHAIN)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_STALWART_HELMET, 1)
                .pattern("#%#")
                .pattern(" # ")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadItems.GOLD_REINFORCED_MAIL_HELMET)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_STALWART_CHESTPLATE, 1)
                .pattern("#%#")
                .pattern(" # ")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadItems.GOLD_REINFORCED_MAIL_CHESTPLATE)
                .criterion(hasItem(TeadBlocks.GOLD_CHAIN), conditionsFromItem(TeadBlocks.GOLD_CHAIN))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_PLATE_HELMET, 1)
                .pattern("#%#")
                .pattern("###")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.LEATHER)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_PLATE_CHESTPLATE, 1)
                .pattern("$$$")
                .pattern("%$%")
                .pattern("$ $")
                .input('%', Items.LEATHER)
                .input('$', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_PLATE_BOOTS, 1)
                .pattern("% %")
                .pattern("$ $")
                .input('%', Items.LEATHER)
                .input('$', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_HIGHLAND_HELMET, 1)
                .pattern("###")
                .pattern("% %")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_HIGHLAND_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("#%#")
                .pattern("%#%")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_ROYAL_HELMET, 1)
                .pattern("# #")
                .pattern("###")
                .input('#', Items.GOLD_INGOT)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_THIEF_HELMET, 1)
                .pattern("%%%")
                .pattern("$^$")
                .pattern(" & ")
                .input('^', Items.GOLD_INGOT)
                .input('%', TeadItems.FABRIC)
                .input('$', Items.LEATHER)
                .input('&', Items.BLACK_DYE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_THIEF_CHESTPLATE, 1)
                .pattern("%&%")
                .pattern("$%%")
                .pattern("%%$")
                .input('%', TeadItems.FABRIC)
                .input('$', TeadItems.GOLD_GARMENT_CHESTPLATE)
                .input('&', Items.BLACK_DYE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_MERCENARY_HELMET, 1)
                .pattern("%#%")
                .pattern("# #")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.GOLD_NUGGET)
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_SPANGENHELM_HELMET, 1)
                .pattern(" % ")
                .pattern("%$%")
                .pattern(" # ")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.GOLD_NUGGET)
                .input('$', Items.GOLDEN_HELMET)
                .criterion(hasItem(Items.GOLDEN_HELMET), conditionsFromItem(Items.GOLDEN_HELMET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GUARD_HELMET, 1)
                .pattern("%#%")
                .pattern("# #")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.LEATHER)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GUARD_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("%#%")
                .pattern("%$%")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.LEATHER)
                .input('$', TeadItems.GOLD_GARMENT_CHESTPLATE)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GARMENT_BOOTS, 1)
                .pattern("% %")
                .pattern("# #")
                .input('#', Items.GOLD_NUGGET)
                .input('%', Items.BAMBOO)
                .criterion(hasItem(Items.GOLD_NUGGET), conditionsFromItem(Items.GOLD_NUGGET))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GARMENT_CHESTPLATE, 1)
                .pattern("%#%")
                .input('#', Items.GOLD_INGOT)
                .input('%', Items.LEATHER)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GHOSTLY_HELMET, 1)
                .pattern(" % ")
                .pattern("%$%")
                .pattern(" # ")
                .input('#', Items.GOLD_INGOT)
                .input('$', Items.SKELETON_SKULL)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .criterion(hasItem(Items.SKELETON_SKULL), conditionsFromItem(Items.SKELETON_SKULL))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GHOSTLY_CHESTPLATE, 1)
                .pattern("% %")
                .pattern("%$%")
                .pattern("%#%")
                .input('#', TeadItems.GOLD_GARMENT_CHESTPLATE)
                .input('$', Items.LEATHER)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .criterion(hasItem(TeadItems.GOLD_GARMENT_CHESTPLATE),
                        conditionsFromItem(TeadItems.GOLD_GARMENT_CHESTPLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.GOLD_GHOSTLY_BOOTS, 1)
                .pattern("# #")
                .pattern("% %")
                .input('#', Items.GOLD_INGOT)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.GOLD_INGOT), conditionsFromItem(Items.GOLD_INGOT))
                .offerTo(exporter);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_STALWART_HELMET, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_STALWART_HELMET);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_STALWART_CHESTPLATE, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_STALWART_CHESTPLATE);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_PLATE_HELMET, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_PLATE_HELMET);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_PLATE_BOOTS, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_PLATE_BOOTS);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_HIGHLAND_HELMET, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_HIGHLAND_HELMET);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_HIGHLAND_CHESTPLATE, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_HIGHLAND_CHESTPLATE);
        offerNetheriteUpgradeRecipe(exporter, TeadItems.DIAMOND_ROYAL_HELMET, RecipeCategory.COMBAT,
                TeadItems.NETHERITE_ROYAL_HELMET);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROBE_HELMET, 1)
                .pattern("%#%")
                .pattern("# #")
                .input('#', Items.LEATHER)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.LEATHER), conditionsFromItem(Items.LEATHER))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROBE_CHESTPLATE, 1)
                .pattern("# #")
                .pattern("%#%")
                .pattern("%#%")
                .input('#', Items.LEATHER)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.LEATHER), conditionsFromItem(Items.LEATHER))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, TeadItems.ROBE_BOOTS, 1)
                .pattern("% %")
                .pattern("# #")
                .input('#', Items.LEATHER)
                .input('%', TeadItems.FABRIC)
                .criterion(hasItem(Items.LEATHER), conditionsFromItem(Items.LEATHER))
                .criterion(hasItem(TeadItems.FABRIC), conditionsFromItem(TeadItems.FABRIC))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.TOOLS, Items.ROOTED_DIRT, 2)
                .pattern("%#")
                .pattern("#%")
                .input('#', Items.DIRT)
                .input('%', Items.HANGING_ROOTS)
                .criterion(hasItem(Items.HANGING_ROOTS), conditionsFromItem(Items.HANGING_ROOTS))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, Items.COBBLESTONE, 1)
                .pattern("##")
                .pattern("##")
                .input('#', TeadItems.ROCK)
                .criterion(hasItem(TeadItems.ROCK), conditionsFromItem(TeadItems.ROCK))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadItems.ROCK, 4)
                .input(Items.COBBLESTONE)
                .criterion(hasItem(Items.COBBLESTONE), conditionsFromItem(Items.COBBLESTONE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, Items.COBBLED_DEEPSLATE, 1)
                .pattern("##")
                .pattern("##")
                .input('#', TeadItems.SLATE)
                .criterion(hasItem(TeadItems.SLATE), conditionsFromItem(TeadItems.SLATE))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadItems.SLATE, 4)
                .input(Items.COBBLED_DEEPSLATE)
                .criterion(hasItem(Items.COBBLED_DEEPSLATE), conditionsFromItem(Items.COBBLED_DEEPSLATE))
                .offerTo(exporter);
        ShapedRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, Items.BLACKSTONE, 1)
                .pattern("##")
                .pattern("##")
                .input('#', TeadItems.BLACK_ROCK)
                .criterion(hasItem(TeadItems.BLACK_ROCK), conditionsFromItem(TeadItems.BLACK_ROCK))
                .offerTo(exporter);
        ShapelessRecipeJsonBuilder.create(RecipeCategory.BUILDING_BLOCKS, TeadItems.BLACK_ROCK, 4)
                .input(Items.BLACKSTONE)
                .criterion(hasItem(Items.BLACKSTONE), conditionsFromItem(Items.BLACKSTONE))
                .offerTo(exporter);
    }
}
